
2024 assignment

The goal of this assignment is to develop deeper understanding of
lexing, parsing, and semantic analysis.

As a widely used and popular language, we will focus on SQL.

```
match hash(UT EID) % 6
(hash(tc35859) = 485)
0 => use derby
1 => use mariadb
2 => use mysql
3 => use postgresql
4 => use sqlite
5 => use trino <=
```

You can find ANTLR files here:
https://github.com/antlr/grammars-v4/tree/master/sql.

1. Using ANTLR generate lexer, parser, and visitors.  As the target
programming language, you can choose whatever you desire.

2. Write visitors to check for semantic rules.

```
match hash(UT EID) % 3
0 => do A)
1 => do B)
2 => do C) <=
```

In all cases below, we assume that the input to your semantic analysis
is a set of .sql scripts that should be analyzed jointly.  For
simplicity, each .sql script contains a single SQL statement.

A) Check the following rules:

* Each table (name) used in a SELECT statement should have a corresponding CREATE statement (in another sql file)
* Detect duplicate statements (i.e., two .sql scripts that contain same code): you should replace any column identifier with _ and then compare processed queries

B) Check the following rules:

* Every column used in a SELECT statement should be created in one of the CREATE statements
* Any expression that has `_ + _` form should pass your check only if both operands are integers

C) Check the following rules:

* If there is UNION in SELECT statement, check that every select statement has the same number of columns and same types
* If SELECT uses one of the aggregate functions, make sure that the type of the column used as the argument to a function is compatible.  You can limit the check to any five aggregate functions that you wish.


Submission.  In the repository that you should have shared with us
already, create a directory `sql` (lower case letters).  There, you
should have all your code.  Additionally, you should have a script `s`
(bash) that compiles everything that is needed and runs a few examples
using your lexer + parser + semantic checks.  As always, everything
has to run on Linux.
