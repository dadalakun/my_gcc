I am not albe to compile gcc14 using limited resources (free Linux machine on AWS).
What I've done is fork the source code and initialize the script.

*Problem Statement*
There are several problems in this file and you will select one based
on your UT EID:

```
match hash(UT EID) % 4
0 => use LLVM 18
1 => use GCC 14
2 => use LLVM 17
3 => use GCC 13
```

hash(x) is defined as follows: Take ASCII value of each char in x and
sum them (e.g., hash('abc') -> 65 + 66 + 67).

Extend the C programming language to support a new language construct:

```
  [[ IntExpression, Expression, IntExpression ]]
```

Semantics: Evaluate `Expression` and then check if the first and the
last expressions are equal.  If yes, then stop; otherwise increment
the first expression by one and then repete the steps.  Here is an
example.

```
int n() { ... }

int m(int a, int b) { // a=0, b=1
    int c = [[ a, n(), b ]]; // n() will be called twice (but a and b only once each) and the result will be in c
    return c;
}
```

*Environment*

Linux


*Submission*

Fork GCC or LLVM and share with us your private fork on GitHub.
GitHub ids will be posted on Canvas.

Your code repository needs to contain a script (named `s`) that will
compile everything and run an example.

You should include several examples to illustrate the features that
are (not) working.